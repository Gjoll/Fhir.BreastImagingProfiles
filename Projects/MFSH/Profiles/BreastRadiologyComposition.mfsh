#include "Common.inc"
#use "HeaderFragment.inc"
#use "BreastRadiologyComposition.macros.inc"
#use "NodeGraph.inc"

Profile: BreastRadiologyComposition
Parent: Composition
Title: "Breast Radiology Composition"
Description: """
    This profile defines the composition instance for the Breast Radiology FHIR Document.
    This profile is based on FHIR Composition resource.

    The composition object is a required part of the FHIR Document structure.
    One composition must exist, and it must be the first resource stored in the FHIR document bundle.

    The other exam related resources are referenced through the 
    sections defined in this resource.

    This composition creates the following sections.

    A. Report Section.
    This contains a single reference to the Breast Radiology Report
    All Breast Radiology Findings are referenced by the reports results element.

    B. Impressions Section.
    All of the clinical impressions created for this exam are referenced in this section.

    C. Recommendations Section.
    All of the service and medication recommendations created for this exam are referenced in this section.
    If a recommendation is in response to a particular observation or finding, then 
    the recommendations 'reasonReference' should contain a  reference to the pertinant observation or finding.
	"""

  #apply HeaderFragment()
  * type = LOINC#42132-1 "US Breast screening"

  #apply GraphNodeProfile("Breast/Radiology/Composition")
  #apply GraphLinkByName("focus", "%Profile%/main", "%Profile%/section:*")
  #apply GraphLinkByReference("focus", "%Profile%/section:*", ".entry")
  #apply StartSectionSlicing()

  * section contains
      report 1..1 MS and
      impressions 0..1 MS and
      findingsRightBreast 0..1 MS and
      findingsLeftBreast 0..1 MS

  #apply ReportSection("report") 
  #apply ImpressionsSection("impressions")
  #apply FindingsRightBreastSection("findingsRightBreast")
  #apply FindingsLeftBreastSection("findingsLeftBreast")


    //// Related Resources Section
    //{
    //    ElementTreeNode sliceElementDef = StartSectionSlicing(e);
    //    {
    //        String[] targets = new string[] {Global.ResourceUrl};

    //        ElementTreeSlice sectionSlice = SliceSection(sliceElementDef,
    //            "relatedResources",
    //            "Related Resources",
    //            Self.SectionCodeRelatedResources,
    //            out ElementDefinition entry);
    //        entry
    //            .ZeroToMany()
    //            .Type("Reference", null, targets)
    //            .Short("Related Resource reference")
    //            .Definition("Reference to the related resource.")
    //            ;
    //        sectionSlice.ElementDefinition
    //            .ZeroToOne()
    //            .Short("Related Clinical Resources Section")
    //            .Definition(
    //    "References to FHIR clinical resources used during the exam or referenced by this report.")
    //            .MustSupport();
    //        ;
    //        e.AddComponentLink("Related Resources",
    //            new SDefEditor.Cardinality(sectionSlice.ElementDefinition),
    //            new SDefEditor.Cardinality(entry),
    //            Global.ElementAnchor(sectionSlice.ElementDefinition),
    //            "Section",
    //            targets);
    //    }
    //}

    //// Recommendations Section
    //{
    //    ElementTreeNode sliceElementDef = StartSectionSlicing(e);
    //    {
    //        String[] targets = new string[]
    //        {
    //            Global.MedicationRequestUrl, Global.ServiceRequestUrl,
    //            Self.ServiceRecommendation.Value().Url
    //        };

    //        ElementTreeSlice sectionSlice = SliceSection(sliceElementDef,
    //            "recommendations",
    //            "Recommendations",
    //            Self.SectionCodeRecommendations,
    //            out ElementDefinition entry);
    //        entry
    //            .ZeroToMany()
    //            .Type("Reference", null, targets)
    //            .Short("Recommendation reference")
    //            .Definition("Reference to the recommended action.")
    //            ;
    //        sectionSlice.ElementDefinition
    //            .ZeroToOne()
    //            .Short("Recommendations Section")
    //            .Definition(
    //    "This section contains references to recommended actions taken in response to the observations and findings of this report.")
    //            .MustSupport();
    //        ;
    //        e.AddComponentLink("Recommendations",
    //            new SDefEditor.Cardinality(sectionSlice.ElementDefinition),
    //            new SDefEditor.Cardinality(entry),
    //            Global.ElementAnchor(sectionSlice.ElementDefinition),
    //            "Section",
    //            targets);
    //    }
    //}

    //// Admin Section
    //{
    //    ElementTreeNode sliceElementDef = StartSectionSlicing(e);
    //    {
    //        String[] targets = new string[] { Global.ResourceUrl };

    //        ElementTreeSlice sectionSlice = SliceSection(sliceElementDef,
    //            "admin",
    //            "Admin",
    //            Self.SectionCodeAdmin,
    //            out ElementDefinition entry);
    //        entry
    //            .ZeroToMany()
    //            .Type("Reference", null, targets)
    //            .Short("Administrative section")
    //            .Definition("References to all administrative resources go here.")
    //            ;
    //        sectionSlice.ElementDefinition
    //            .ZeroToOne()
    //            .Short("Administrative section")
    //            .Definition(
    //    "References to all administrative resources go here.")
    //            .MustSupport();
    //        ;
    //        e.AddComponentLink("Admin",
    //            new SDefEditor.Cardinality(sectionSlice.ElementDefinition),
    //            new SDefEditor.Cardinality(entry),
    //            Global.ElementAnchor(sectionSlice.ElementDefinition),
    //            "Section",
    //            targets);
    //    }
    //}	
